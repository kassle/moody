<?php declare(strict_types=1);

require_once "include/MoodleRestMock.php";

use Loncat\Moody\AppImpl;

class AppImplUserTest extends MoodleRestMock {
    public function testCreateUserShouldCallMoodleRestWithCorrectFunctionAndParameters() {
        $request = $this->createUserResponse();
        $request["password"] = "secrets";
        $id = "autogenerated-id";

        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->with("core_user_create_users", array("users" => array(array(
                "createpassword" => 0,
                "username" => $request["username"],
                "password" => $request["password"],
                "email" => $request["email"],
                "firstname" => $request["firstname"],
                "lastname" => $request["lastname"],
                "city" => $request["city"],
                "country" => $request["country"]
            ))), MoodleRest::METHOD_POST)
            ->willReturn(array(array(
                "id" => $id,
                "username" => $request["username"]
            )));

        $app = new AppImpl($rest);
        $result = $app->createUser(
            $request["username"],
            $request["password"],
            $request["email"],
            $request["firstname"],
            $request["lastname"],
            $request["city"],
            $request["country"]);

        $this->assertEquals(0, sizeof($result["error"]));
        $this->assertEquals(200, $result["data"]["code"]);
        $this->assertEquals($id, $result["data"]["userid"]);
    }

    public function testCreateUserShouldReturnError400WhenException() {
        $rest = $this->createMoodleRestMockForRequestThatThrowException();
        
        $app = new AppImpl($rest);
        $result = $app->createUser("username", "password", "email", "firstname", "lastname", "city", "country");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(400, $result["error"]["code"]);
    }

    public function testCreateUserShouldReturnError500WhenResponseError() {
        $response = array(
            "errorcode" => "exception",
            "message" => "access denied"
        );
        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->willReturn($response);
        
        $app = new AppImpl($rest);
        $result = $app->createUser("username", "password", "email", "firstname", "lastname", "city", "country");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(500, $result["error"]["code"]);
        $this->assertEquals($response["message"], $result["error"]["message"]);
    }

    public function testGetUserByIdShouldCallMoodleRestWithCorrectFunctionAndParameters() {
        $response = $this->createUserResponse();
        $id = $response["id"];

        $rest = $this->createMoodleRestMockForRequestGetUserByField("id", $id, array($response));

        $app = new AppImpl($rest);
        $result = $app->getUserById($id);

        $this->assertEquals($response["id"], $result["data"]["userid"]);
        $this->assertEquals($response["username"], $result["data"]["username"]);
        $this->assertEquals($response["email"], $result["data"]["email"]);
        $this->assertEquals($response["firstname"], $result["data"]["firstname"]);
        $this->assertEquals($response["lastname"], $result["data"]["lastname"]);
        $this->assertEquals($response["city"], $result["data"]["city"]);
        $this->assertEquals($response["country"], $result["data"]["country"]);
        $this->assertEquals(0, sizeof($result["error"]));
    }

    public function testGetUserByIdShouldReturnError400WhenExceptionHappen() {
        $rest = $this->createMoodleRestMockForRequestThatThrowException();
        
        $app = new AppImpl($rest);
        $result = $app->getUserById("any");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(400, $result["error"]["code"]);
    }

    public function testGetUserByIdShouldReturnError404WhenResponseIsEmpty() {
        $id = "8192";
        $rest = $this->createMoodleRestMockForRequestGetUserByField("id", $id, array());

        $app = new AppImpl($rest);
        $result = $app->getUserById($id);

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(404, $result["error"]["code"]);
    }
    
    public function testGetUserByIdShouldReturnError500WhenResponseIsError() {
        $id = "8192";
        $message = "server error";
        $response = array(
            "errorcode" => "exception",
            "message" => $message
        );
        $rest = $this->createMoodleRestMockForRequestGetUserByField("id", $id, $response);

        $app = new AppImpl($rest);
        $result = $app->getUserById($id);

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(500, $result["error"]["code"]);
        $this->assertEquals($message, $result["error"]["message"]);
    }

    public function testGetUserByUsernameShouldCallMoodleRestWithCorrectFunctionAndParameters() {
        $response = $this->createUserResponse();
        $user = $response["username"];

        $rest = $this->createMoodleRestMockForRequestGetUserByField("username", $user, array($response));

        $app = new AppImpl($rest);
        $result = $app->getUserByUsername($user);

        $this->assertEquals($response["id"], $result["data"]["userid"]);
        $this->assertEquals($response["username"], $result["data"]["username"]);
        $this->assertEquals($response["email"], $result["data"]["email"]);
        $this->assertEquals($response["firstname"], $result["data"]["firstname"]);
        $this->assertEquals($response["lastname"], $result["data"]["lastname"]);
        $this->assertEquals($response["city"], $result["data"]["city"]);
        $this->assertEquals($response["country"], $result["data"]["country"]);
        $this->assertEquals(0, sizeof($result["error"]));
    }

    public function testGetUserByEmailShouldCallMoodleRestWithCorrectFunctionAndParameters() {
        $response = $this->createUserResponse();
        $email = $response["email"];

        $rest = $this->createMoodleRestMockForRequestGetUserByField("email", $email, array($response));

        $app = new AppImpl($rest);
        $result = $app->getUserByEmail($email);

        $this->assertEquals($response["id"], $result["data"]["userid"]);
        $this->assertEquals($response["username"], $result["data"]["username"]);
        $this->assertEquals($response["email"], $result["data"]["email"]);
        $this->assertEquals($response["firstname"], $result["data"]["firstname"]);
        $this->assertEquals($response["lastname"], $result["data"]["lastname"]);
        $this->assertEquals($response["city"], $result["data"]["city"]);
        $this->assertEquals($response["country"], $result["data"]["country"]);
        $this->assertEquals(0, sizeof($result["error"]));
    }

    private function createUserResponse() : array {
        return array(
            "id" => "8192",
            "username" => "batman",
            "email" => "batman@gotham.com",
            "firstname" => "bruce",
            "lastname" => "wayne",
            "city" => "gotham",
            "country" => "dc"
        );
    }

    private function createMoodleRestMockForRequestGetUserByField(string $field, string $value, array $result) : MoodleRest {
        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->with($this->identicalTo("core_user_get_users_by_field"),
                $this->identicalTo(array("field" => $field, "values" => array($value))))
            ->willReturn($result);

        return $rest;
    }

    public function testUpdateUserShouldReturnSuccess() {
        $updates = array(
            "firstname" => "bruce",
            "lastname" => "wayne",
            "city" => "gotham",
            "id" => "8192"
        );
        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->with("core_user_update_users", $this->identicalTo(array("users" => array($updates))), MoodleRest::METHOD_POST)
            ->willReturn(array());

        $app = new AppImpl($rest);
        $result = $app->updateUser($updates["id"], "", "", $updates["firstname"], $updates["lastname"], $updates["city"], "");

        $this->assertEquals(0, sizeof($result["error"]));
        $this->assertEquals(200, $result["data"]["code"]);
    }

    public function testUpdateUserShouldReturnError400WhenException() {
        $rest = $this->createMoodleRestMockForRequestThatThrowException();
        
        $app = new AppImpl($rest);
        $result = $app->updateUser("any", "", "", "", "", "", "us");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(400, $result["error"]["code"]);
    }

    public function testUpdateUserShouldReturnError400WhenNoDataChanged() {
        $rest = $this->createMoodleRestMock();
        
        $app = new AppImpl($rest);
        $result = $app->updateUser("any", "", "", "", "", "", "");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(400, $result["error"]["code"]);
    }

    public function testUpdateUserShouldReturnError500WhenResponseError() {
        $response = array(
            "errorcode" => "exception",
            "message" => "access denied"
        );
        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->willReturn($response);
        
        $app = new AppImpl($rest);
        $result = $app->updateUser("any", "secret", "", "", "", "", "us");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(500, $result["error"]["code"]);
        $this->assertEquals($response["message"], $result["error"]["message"]);
    }

    function testDeleteUserShouldReturnSuccess() {
        $id = "7548";

        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->with("core_user_delete_users", array("userids" => array($id)), MoodleRest::METHOD_POST)
            ->willReturn(array());

        $app = new AppImpl($rest);
        $result = $app->deleteUser($id);
        
        $this->assertEquals(0, sizeof($result["error"]));
        $this->assertEquals(200, $result["data"]["code"]);
    }

    public function testDeleteUserShouldReturnError400WhenException() {
        $rest = $this->createMoodleRestMockForRequestThatThrowException();
        
        $app = new AppImpl($rest);
        $result = $app->deleteUser("7548");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(400, $result["error"]["code"]);
    }

    public function testDeleteUserShouldReturnError500WhenResponseError() {
        $response = array(
            "errorcode" => "exception",
            "message" => "access denied"
        );
        $rest = $this->createMoodleRestMock();
        $rest->expects($this->once())
            ->method("request")
            ->willReturn($response);
        
        $app = new AppImpl($rest);
        $result = $app->deleteUser("7548");

        $this->assertEquals(0, sizeof($result["data"]));
        $this->assertEquals(500, $result["error"]["code"]);
        $this->assertEquals($response["message"], $result["error"]["message"]);
    }
}